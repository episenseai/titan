from datetime import datetime

import sqlalchemy
from pydantic import UUID4
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql.schema import Table

from ...utils import ImmutBaseModel


def admins_schema(admins_table: str) -> Table:
    """
    (email + username) constitutes the primary key for the table.
    Same `email` may have have multiple accounts (username) with varying
    level of scopes.

    NOTE:
        Reuse or `cache` the return value at the call site. Schema
        do not change except for during migrations.
    """
    metadata = sqlalchemy.MetaData()

    # Column defaults/onupdate callables are not supported by 'databases' library.
    # That is why we are using server_default/server_onupdate.

    # https://docs.sqlalchemy.org/en/13/core/metadata.html#sqlalchemy.schema.Column
    return sqlalchemy.Table(
        admins_table,
        metadata,
        # Unique id generated by the database.
        sqlalchemy.Column(
            "adminid",
            postgresql.UUID(),
            nullable=False,
            unique=True,
            server_default=sqlalchemy.text("gen_random_uuid()"),
        ),
        # email id of the admin ***(email must exist in 'users` table)***
        # Do not add foriegn key constraint. Admins must be added manually to
        # database; no api should be provided.
        sqlalchemy.Column("email", sqlalchemy.String(length=254), primary_key=True),
        # Each email can be associated with multiple 'username' which may have different
        # scopes associated with them. But the 'username' must be unqiue throughout the
        # table. Two different emails can not have the same same 'username'.
        sqlalchemy.Column("username", sqlalchemy.String(length=254), primary_key=True, unique=True),
        # admin password
        sqlalchemy.Column("password", sqlalchemy.String(length=1024), nullable=False),
        # Is the admin account frozen? Admins with appropriate privilage/scope can
        # freeze accounts.
        sqlalchemy.Column(
            "frozen",
            sqlalchemy.Boolean,
            nullable=False,
            server_default=sqlalchemy.sql.expression.false(),
        ),
        # Granted oauth2 `scope` to the admin to do different admin stuffs.
        sqlalchemy.Column("scope", sqlalchemy.String(length=2048), nullable=False),
        # Date of account creation.
        sqlalchemy.Column(
            "created_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=False,
            server_default=sqlalchemy.sql.functions.current_timestamp(),
        ),
        # Date of account update.
        sqlalchemy.Column(
            "updated_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=False,
            server_default=sqlalchemy.sql.functions.current_timestamp(),
            server_onupdate=sqlalchemy.sql.functions.current_timestamp(),
        ),
    )


class AdminInDB(ImmutBaseModel):
    adminid: UUID4
    email: str
    username: str
    password: str
    frozen: bool
    scope: str = ""
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True
