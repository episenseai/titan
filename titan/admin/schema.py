from datetime import datetime

import sqlalchemy
from asyncpg.exceptions import DuplicateTableError
from databases import Database
from pydantic import UUID4
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql.schema import Table

from ..utils import ImmutBaseModel


def admins_schema(table_name: str) -> Table:
    """
    (email + username) constitutes the primary key for the table.
    Same `email` may have have multiple accounts (username) with varying
    level of scopes.

    NOTE:
        Reuse or `cache` the return value at the call site. Schema
        do not change except for during migrations.
    """
    metadata = sqlalchemy.MetaData()

    # Column defaults/onupdate callables are not supported by 'databases' library.
    # That is why we are using server_default/server_onupdate.

    # https://docs.sqlalchemy.org/en/13/core/metadata.html#sqlalchemy.schema.Column
    return sqlalchemy.Table(
        table_name,
        metadata,
        # Unique id generated by the database.
        sqlalchemy.Column(
            "adminid",
            postgresql.UUID(),
            nullable=False,
            unique=True,
            server_default=sqlalchemy.text("uuid_generate_v4()"),
        ),
        # email id of the admin ***(email must exist in 'users` table)***
        # Do not add foriegn key constraint. Admins must be added manually to
        # database; no api should be provided.
        sqlalchemy.Column("email", sqlalchemy.String(length=254), primary_key=True),
        # admin username
        sqlalchemy.Column("username", sqlalchemy.String(length=254), primary_key=True),
        # admin password
        sqlalchemy.Column("password", sqlalchemy.String(length=1024), nullable=False),
        # Is the admin account disabled?
        sqlalchemy.Column(
            "disabled",
            sqlalchemy.Boolean,
            nullable=False,
            server_default=sqlalchemy.sql.expression.false(),
        ),
        # Granted oauth2 `scope` to the admin to do different admin stuffs.
        sqlalchemy.Column("scope", sqlalchemy.String(length=2048), nullable=False),
        # Date of account creation.
        sqlalchemy.Column(
            "created_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=False,
            server_default=sqlalchemy.sql.functions.current_timestamp(),
        ),
        # Date of account update.
        sqlalchemy.Column(
            "updated_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=False,
            server_default=sqlalchemy.sql.functions.current_timestamp(),
            server_onupdate=sqlalchemy.sql.functions.current_timestamp(),
        ),
    )


class AdminInDB(ImmutBaseModel):
    adminid: UUID4
    email: str
    username: str
    password: str
    disabled: bool
    scope: str = ""
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True


async def create_admins_table(database: Database, table_name: str):
    """
    compiled CREATE TABLE statement
    >>> print(str(sqlalchemy.schema.CreateTable(admins_table).compile(dialect=postgresql.dialect())))
    """
    async with database as db:
        try:
            # enable UUID extension for the postgresql
            uuid_enable_query = '''CREATE EXTENSION IF NOT EXISTS "uuid-ossp"'''
            await db.execute(query=uuid_enable_query)
            admins_table = admins_schema(table_name)
            # CREATE TABLE
            create_table_query = sqlalchemy.schema.CreateTable(admins_table)
            await db.execute(query=create_table_query)
        except DuplicateTableError as exc:
            print(f"{exc} -- TABLE already exists in the {database.url}")
